[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "data-for-seo"
version = "0.1.0"
description = "SEO automation framework using Data for SEO APIs and Agent Factory"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Agent Factory", email = "dev@agent-factory.ai"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    # Core framework
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Async and HTTP
    "aiohttp>=3.9.0",
    "httpx>=0.25.0",
    
    # API and web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Database and storage
    "redis>=5.0.0",
    "chromadb>=0.4.0",
    
    # ML and embeddings
    "sentence-transformers>=2.2.0",
    "numpy>=1.24.0",
    
    # Data processing
    "pandas>=2.0.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    
    # Date and time
    "python-dateutil>=2.8.0",
    
    # Validation and serialization
    "marshmallow>=3.20.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    
    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "black>=23.9.0",
    
    # Development tools
    "pre-commit>=3.4.0",
    "ipython>=8.15.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/yogi-bear-92/data-for-seo"
Repository = "https://github.com/yogi-bear-92/data-for-seo"
Documentation = "https://github.com/yogi-bear-92/data-for-seo/docs"
Issues = "https://github.com/yogi-bear-92/data-for-seo/issues"

[project.scripts]
data-for-seo = "data_for_seo.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/data_for_seo"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["N", "S101"]

[tool.ruff.lint.isort]
known-first-party = ["data_for_seo"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "sentence_transformers.*",
    "redis.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/data_for_seo",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/data_for_seo"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
